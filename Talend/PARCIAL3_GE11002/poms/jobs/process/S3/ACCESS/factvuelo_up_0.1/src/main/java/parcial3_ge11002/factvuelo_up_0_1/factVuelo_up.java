// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package parcial3_ge11002.factvuelo_up_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: factVuelo_up Purpose: factVuelo_up<br>
 * Description: factVuelo_up <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class factVuelo_up implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "factVuelo_up";
	private final String projectName = "PARCIAL3_GE11002";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					factVuelo_up.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(factVuelo_up.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class factvuelosStruct implements routines.system.IPersistableRow<factvuelosStruct> {
		final static byte[] commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up = new byte[0];
		static byte[] commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[0];

		public Integer fechaKey;

		public Integer getFechaKey() {
			return this.fechaKey;
		}

		public Integer airlineKey;

		public Integer getAirlineKey() {
			return this.airlineKey;
		}

		public String Flight_Number_Operating_Airline;

		public String getFlight_Number_Operating_Airline() {
			return this.Flight_Number_Operating_Airline;
		}

		public Integer OriginAirportID;

		public Integer getOriginAirportID() {
			return this.OriginAirportID;
		}

		public String OriginCityName;

		public String getOriginCityName() {
			return this.OriginCityName;
		}

		public String OriginState;

		public String getOriginState() {
			return this.OriginState;
		}

		public String OriginStateName;

		public String getOriginStateName() {
			return this.OriginStateName;
		}

		public Integer DestAirportID;

		public Integer getDestAirportID() {
			return this.DestAirportID;
		}

		public String DestCityName;

		public String getDestCityName() {
			return this.DestCityName;
		}

		public String DestState;

		public String getDestState() {
			return this.DestState;
		}

		public String DestStateName;

		public String getDestStateName() {
			return this.DestStateName;
		}

		public String CRSDepTime;

		public String getCRSDepTime() {
			return this.CRSDepTime;
		}

		public String DepTime;

		public String getDepTime() {
			return this.DepTime;
		}

		public Float DepDelayMinutes;

		public Float getDepDelayMinutes() {
			return this.DepDelayMinutes;
		}

		public Float DepDel15;

		public Float getDepDel15() {
			return this.DepDel15;
		}

		public String WheelsOff;

		public String getWheelsOff() {
			return this.WheelsOff;
		}

		public String WheelsOn;

		public String getWheelsOn() {
			return this.WheelsOn;
		}

		public String CRSArrTime;

		public String getCRSArrTime() {
			return this.CRSArrTime;
		}

		public String ArrTime;

		public String getArrTime() {
			return this.ArrTime;
		}

		public Float ArrDelayMinutes;

		public Float getArrDelayMinutes() {
			return this.ArrDelayMinutes;
		}

		public Float ArrDel15;

		public Float getArrDel15() {
			return this.ArrDel15;
		}

		public Float Cancelled;

		public Float getCancelled() {
			return this.Cancelled;
		}

		public Float Diverted;

		public Float getDiverted() {
			return this.Diverted;
		}

		public Float CRSElapsedTime;

		public Float getCRSElapsedTime() {
			return this.CRSElapsedTime;
		}

		public Float ActualElapsedTime;

		public Float getActualElapsedTime() {
			return this.ActualElapsedTime;
		}

		public Float AirTime;

		public Float getAirTime() {
			return this.AirTime;
		}

		public String CarrierDelay;

		public String getCarrierDelay() {
			return this.CarrierDelay;
		}

		public String WeatherDelay;

		public String getWeatherDelay() {
			return this.WeatherDelay;
		}

		public String NASDelay;

		public String getNASDelay() {
			return this.NASDelay;
		}

		public String SecurityDelay;

		public String getSecurityDelay() {
			return this.SecurityDelay;
		}

		public String LateAircraftDelay;

		public String getLateAircraftDelay() {
			return this.LateAircraftDelay;
		}

		public Integer DivAirportLandings;

		public Integer getDivAirportLandings() {
			return this.DivAirportLandings;
		}

		public String DivReachedDest;

		public String getDivReachedDest() {
			return this.DivReachedDest;
		}

		public String DivActualElapsedTime;

		public String getDivActualElapsedTime() {
			return this.DivActualElapsedTime;
		}

		public String DivArrDelay;

		public String getDivArrDelay() {
			return this.DivArrDelay;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL3_GE11002_factVuelo_up.length) {
					if (length < 1024 && commonByteArray_PARCIAL3_GE11002_factVuelo_up.length == 0) {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[1024];
					} else {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length);
				strReturn = new String(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL3_GE11002_factVuelo_up.length) {
					if (length < 1024 && commonByteArray_PARCIAL3_GE11002_factVuelo_up.length == 0) {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[1024];
					} else {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length);
				strReturn = new String(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up) {

				try {

					int length = 0;

					this.fechaKey = readInteger(dis);

					this.airlineKey = readInteger(dis);

					this.Flight_Number_Operating_Airline = readString(dis);

					this.OriginAirportID = readInteger(dis);

					this.OriginCityName = readString(dis);

					this.OriginState = readString(dis);

					this.OriginStateName = readString(dis);

					this.DestAirportID = readInteger(dis);

					this.DestCityName = readString(dis);

					this.DestState = readString(dis);

					this.DestStateName = readString(dis);

					this.CRSDepTime = readString(dis);

					this.DepTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DepDelayMinutes = null;
					} else {
						this.DepDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DepDel15 = null;
					} else {
						this.DepDel15 = dis.readFloat();
					}

					this.WheelsOff = readString(dis);

					this.WheelsOn = readString(dis);

					this.CRSArrTime = readString(dis);

					this.ArrTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ArrDelayMinutes = null;
					} else {
						this.ArrDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ArrDel15 = null;
					} else {
						this.ArrDel15 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Cancelled = null;
					} else {
						this.Cancelled = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Diverted = null;
					} else {
						this.Diverted = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRSElapsedTime = null;
					} else {
						this.CRSElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ActualElapsedTime = null;
					} else {
						this.ActualElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AirTime = null;
					} else {
						this.AirTime = dis.readFloat();
					}

					this.CarrierDelay = readString(dis);

					this.WeatherDelay = readString(dis);

					this.NASDelay = readString(dis);

					this.SecurityDelay = readString(dis);

					this.LateAircraftDelay = readString(dis);

					this.DivAirportLandings = readInteger(dis);

					this.DivReachedDest = readString(dis);

					this.DivActualElapsedTime = readString(dis);

					this.DivArrDelay = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up) {

				try {

					int length = 0;

					this.fechaKey = readInteger(dis);

					this.airlineKey = readInteger(dis);

					this.Flight_Number_Operating_Airline = readString(dis);

					this.OriginAirportID = readInteger(dis);

					this.OriginCityName = readString(dis);

					this.OriginState = readString(dis);

					this.OriginStateName = readString(dis);

					this.DestAirportID = readInteger(dis);

					this.DestCityName = readString(dis);

					this.DestState = readString(dis);

					this.DestStateName = readString(dis);

					this.CRSDepTime = readString(dis);

					this.DepTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DepDelayMinutes = null;
					} else {
						this.DepDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DepDel15 = null;
					} else {
						this.DepDel15 = dis.readFloat();
					}

					this.WheelsOff = readString(dis);

					this.WheelsOn = readString(dis);

					this.CRSArrTime = readString(dis);

					this.ArrTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ArrDelayMinutes = null;
					} else {
						this.ArrDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ArrDel15 = null;
					} else {
						this.ArrDel15 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Cancelled = null;
					} else {
						this.Cancelled = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Diverted = null;
					} else {
						this.Diverted = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRSElapsedTime = null;
					} else {
						this.CRSElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ActualElapsedTime = null;
					} else {
						this.ActualElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AirTime = null;
					} else {
						this.AirTime = dis.readFloat();
					}

					this.CarrierDelay = readString(dis);

					this.WeatherDelay = readString(dis);

					this.NASDelay = readString(dis);

					this.SecurityDelay = readString(dis);

					this.LateAircraftDelay = readString(dis);

					this.DivAirportLandings = readInteger(dis);

					this.DivReachedDest = readString(dis);

					this.DivActualElapsedTime = readString(dis);

					this.DivArrDelay = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.fechaKey, dos);

				// Integer

				writeInteger(this.airlineKey, dos);

				// String

				writeString(this.Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this.OriginAirportID, dos);

				// String

				writeString(this.OriginCityName, dos);

				// String

				writeString(this.OriginState, dos);

				// String

				writeString(this.OriginStateName, dos);

				// Integer

				writeInteger(this.DestAirportID, dos);

				// String

				writeString(this.DestCityName, dos);

				// String

				writeString(this.DestState, dos);

				// String

				writeString(this.DestStateName, dos);

				// String

				writeString(this.CRSDepTime, dos);

				// String

				writeString(this.DepTime, dos);

				// Float

				if (this.DepDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDelayMinutes);
				}

				// Float

				if (this.DepDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDel15);
				}

				// String

				writeString(this.WheelsOff, dos);

				// String

				writeString(this.WheelsOn, dos);

				// String

				writeString(this.CRSArrTime, dos);

				// String

				writeString(this.ArrTime, dos);

				// Float

				if (this.ArrDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDelayMinutes);
				}

				// Float

				if (this.ArrDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDel15);
				}

				// Float

				if (this.Cancelled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Cancelled);
				}

				// Float

				if (this.Diverted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Diverted);
				}

				// Float

				if (this.CRSElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CRSElapsedTime);
				}

				// Float

				if (this.ActualElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ActualElapsedTime);
				}

				// Float

				if (this.AirTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AirTime);
				}

				// String

				writeString(this.CarrierDelay, dos);

				// String

				writeString(this.WeatherDelay, dos);

				// String

				writeString(this.NASDelay, dos);

				// String

				writeString(this.SecurityDelay, dos);

				// String

				writeString(this.LateAircraftDelay, dos);

				// Integer

				writeInteger(this.DivAirportLandings, dos);

				// String

				writeString(this.DivReachedDest, dos);

				// String

				writeString(this.DivActualElapsedTime, dos);

				// String

				writeString(this.DivArrDelay, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.fechaKey, dos);

				// Integer

				writeInteger(this.airlineKey, dos);

				// String

				writeString(this.Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this.OriginAirportID, dos);

				// String

				writeString(this.OriginCityName, dos);

				// String

				writeString(this.OriginState, dos);

				// String

				writeString(this.OriginStateName, dos);

				// Integer

				writeInteger(this.DestAirportID, dos);

				// String

				writeString(this.DestCityName, dos);

				// String

				writeString(this.DestState, dos);

				// String

				writeString(this.DestStateName, dos);

				// String

				writeString(this.CRSDepTime, dos);

				// String

				writeString(this.DepTime, dos);

				// Float

				if (this.DepDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDelayMinutes);
				}

				// Float

				if (this.DepDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDel15);
				}

				// String

				writeString(this.WheelsOff, dos);

				// String

				writeString(this.WheelsOn, dos);

				// String

				writeString(this.CRSArrTime, dos);

				// String

				writeString(this.ArrTime, dos);

				// Float

				if (this.ArrDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDelayMinutes);
				}

				// Float

				if (this.ArrDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDel15);
				}

				// Float

				if (this.Cancelled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Cancelled);
				}

				// Float

				if (this.Diverted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Diverted);
				}

				// Float

				if (this.CRSElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CRSElapsedTime);
				}

				// Float

				if (this.ActualElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ActualElapsedTime);
				}

				// Float

				if (this.AirTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AirTime);
				}

				// String

				writeString(this.CarrierDelay, dos);

				// String

				writeString(this.WeatherDelay, dos);

				// String

				writeString(this.NASDelay, dos);

				// String

				writeString(this.SecurityDelay, dos);

				// String

				writeString(this.LateAircraftDelay, dos);

				// Integer

				writeInteger(this.DivAirportLandings, dos);

				// String

				writeString(this.DivReachedDest, dos);

				// String

				writeString(this.DivActualElapsedTime, dos);

				// String

				writeString(this.DivArrDelay, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fechaKey=" + String.valueOf(fechaKey));
			sb.append(",airlineKey=" + String.valueOf(airlineKey));
			sb.append(",Flight_Number_Operating_Airline=" + Flight_Number_Operating_Airline);
			sb.append(",OriginAirportID=" + String.valueOf(OriginAirportID));
			sb.append(",OriginCityName=" + OriginCityName);
			sb.append(",OriginState=" + OriginState);
			sb.append(",OriginStateName=" + OriginStateName);
			sb.append(",DestAirportID=" + String.valueOf(DestAirportID));
			sb.append(",DestCityName=" + DestCityName);
			sb.append(",DestState=" + DestState);
			sb.append(",DestStateName=" + DestStateName);
			sb.append(",CRSDepTime=" + CRSDepTime);
			sb.append(",DepTime=" + DepTime);
			sb.append(",DepDelayMinutes=" + String.valueOf(DepDelayMinutes));
			sb.append(",DepDel15=" + String.valueOf(DepDel15));
			sb.append(",WheelsOff=" + WheelsOff);
			sb.append(",WheelsOn=" + WheelsOn);
			sb.append(",CRSArrTime=" + CRSArrTime);
			sb.append(",ArrTime=" + ArrTime);
			sb.append(",ArrDelayMinutes=" + String.valueOf(ArrDelayMinutes));
			sb.append(",ArrDel15=" + String.valueOf(ArrDel15));
			sb.append(",Cancelled=" + String.valueOf(Cancelled));
			sb.append(",Diverted=" + String.valueOf(Diverted));
			sb.append(",CRSElapsedTime=" + String.valueOf(CRSElapsedTime));
			sb.append(",ActualElapsedTime=" + String.valueOf(ActualElapsedTime));
			sb.append(",AirTime=" + String.valueOf(AirTime));
			sb.append(",CarrierDelay=" + CarrierDelay);
			sb.append(",WeatherDelay=" + WeatherDelay);
			sb.append(",NASDelay=" + NASDelay);
			sb.append(",SecurityDelay=" + SecurityDelay);
			sb.append(",LateAircraftDelay=" + LateAircraftDelay);
			sb.append(",DivAirportLandings=" + String.valueOf(DivAirportLandings));
			sb.append(",DivReachedDest=" + DivReachedDest);
			sb.append(",DivActualElapsedTime=" + DivActualElapsedTime);
			sb.append(",DivArrDelay=" + DivArrDelay);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(factvuelosStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up = new byte[0];
		static byte[] commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[0];

		public java.util.Date FlightDate;

		public java.util.Date getFlightDate() {
			return this.FlightDate;
		}

		public Integer DOT_ID_Marketing_Airline;

		public Integer getDOT_ID_Marketing_Airline() {
			return this.DOT_ID_Marketing_Airline;
		}

		public String Operating_Airline;

		public String getOperating_Airline() {
			return this.Operating_Airline;
		}

		public String Flight_Number_Operating_Airline;

		public String getFlight_Number_Operating_Airline() {
			return this.Flight_Number_Operating_Airline;
		}

		public Integer OriginAirportID;

		public Integer getOriginAirportID() {
			return this.OriginAirportID;
		}

		public String Origin;

		public String getOrigin() {
			return this.Origin;
		}

		public String OriginCityName;

		public String getOriginCityName() {
			return this.OriginCityName;
		}

		public String OriginState;

		public String getOriginState() {
			return this.OriginState;
		}

		public String OriginStateFips;

		public String getOriginStateFips() {
			return this.OriginStateFips;
		}

		public String OriginStateName;

		public String getOriginStateName() {
			return this.OriginStateName;
		}

		public Integer OriginWac;

		public Integer getOriginWac() {
			return this.OriginWac;
		}

		public Integer DestAirportID;

		public Integer getDestAirportID() {
			return this.DestAirportID;
		}

		public String Dest;

		public String getDest() {
			return this.Dest;
		}

		public String DestCityName;

		public String getDestCityName() {
			return this.DestCityName;
		}

		public String DestState;

		public String getDestState() {
			return this.DestState;
		}

		public String DestStateFips;

		public String getDestStateFips() {
			return this.DestStateFips;
		}

		public String DestStateName;

		public String getDestStateName() {
			return this.DestStateName;
		}

		public Integer DestWac;

		public Integer getDestWac() {
			return this.DestWac;
		}

		public String CRSDepTime;

		public String getCRSDepTime() {
			return this.CRSDepTime;
		}

		public String DepTime;

		public String getDepTime() {
			return this.DepTime;
		}

		public Float DepDelayMinutes;

		public Float getDepDelayMinutes() {
			return this.DepDelayMinutes;
		}

		public Float DepDel15;

		public Float getDepDel15() {
			return this.DepDel15;
		}

		public String WheelsOff;

		public String getWheelsOff() {
			return this.WheelsOff;
		}

		public String WheelsOn;

		public String getWheelsOn() {
			return this.WheelsOn;
		}

		public String CRSArrTime;

		public String getCRSArrTime() {
			return this.CRSArrTime;
		}

		public String ArrTime;

		public String getArrTime() {
			return this.ArrTime;
		}

		public Float ArrDelayMinutes;

		public Float getArrDelayMinutes() {
			return this.ArrDelayMinutes;
		}

		public Float ArrDel15;

		public Float getArrDel15() {
			return this.ArrDel15;
		}

		public Float Cancelled;

		public Float getCancelled() {
			return this.Cancelled;
		}

		public String CancellationCode;

		public String getCancellationCode() {
			return this.CancellationCode;
		}

		public Float Diverted;

		public Float getDiverted() {
			return this.Diverted;
		}

		public Float CRSElapsedTime;

		public Float getCRSElapsedTime() {
			return this.CRSElapsedTime;
		}

		public Float ActualElapsedTime;

		public Float getActualElapsedTime() {
			return this.ActualElapsedTime;
		}

		public Float AirTime;

		public Float getAirTime() {
			return this.AirTime;
		}

		public Float Distance;

		public Float getDistance() {
			return this.Distance;
		}

		public String CarrierDelay;

		public String getCarrierDelay() {
			return this.CarrierDelay;
		}

		public String WeatherDelay;

		public String getWeatherDelay() {
			return this.WeatherDelay;
		}

		public String NASDelay;

		public String getNASDelay() {
			return this.NASDelay;
		}

		public String SecurityDelay;

		public String getSecurityDelay() {
			return this.SecurityDelay;
		}

		public String LateAircraftDelay;

		public String getLateAircraftDelay() {
			return this.LateAircraftDelay;
		}

		public Integer DivAirportLandings;

		public Integer getDivAirportLandings() {
			return this.DivAirportLandings;
		}

		public String DivReachedDest;

		public String getDivReachedDest() {
			return this.DivReachedDest;
		}

		public String DivActualElapsedTime;

		public String getDivActualElapsedTime() {
			return this.DivActualElapsedTime;
		}

		public String DivArrDelay;

		public String getDivArrDelay() {
			return this.DivArrDelay;
		}

		public String DivDistance;

		public String getDivDistance() {
			return this.DivDistance;
		}

		public String Div1Airport;

		public String getDiv1Airport() {
			return this.Div1Airport;
		}

		public String Div1AirportID;

		public String getDiv1AirportID() {
			return this.Div1AirportID;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL3_GE11002_factVuelo_up.length) {
					if (length < 1024 && commonByteArray_PARCIAL3_GE11002_factVuelo_up.length == 0) {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[1024];
					} else {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length);
				strReturn = new String(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL3_GE11002_factVuelo_up.length) {
					if (length < 1024 && commonByteArray_PARCIAL3_GE11002_factVuelo_up.length == 0) {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[1024];
					} else {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length);
				strReturn = new String(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up) {

				try {

					int length = 0;

					this.FlightDate = readDate(dis);

					this.DOT_ID_Marketing_Airline = readInteger(dis);

					this.Operating_Airline = readString(dis);

					this.Flight_Number_Operating_Airline = readString(dis);

					this.OriginAirportID = readInteger(dis);

					this.Origin = readString(dis);

					this.OriginCityName = readString(dis);

					this.OriginState = readString(dis);

					this.OriginStateFips = readString(dis);

					this.OriginStateName = readString(dis);

					this.OriginWac = readInteger(dis);

					this.DestAirportID = readInteger(dis);

					this.Dest = readString(dis);

					this.DestCityName = readString(dis);

					this.DestState = readString(dis);

					this.DestStateFips = readString(dis);

					this.DestStateName = readString(dis);

					this.DestWac = readInteger(dis);

					this.CRSDepTime = readString(dis);

					this.DepTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DepDelayMinutes = null;
					} else {
						this.DepDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DepDel15 = null;
					} else {
						this.DepDel15 = dis.readFloat();
					}

					this.WheelsOff = readString(dis);

					this.WheelsOn = readString(dis);

					this.CRSArrTime = readString(dis);

					this.ArrTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ArrDelayMinutes = null;
					} else {
						this.ArrDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ArrDel15 = null;
					} else {
						this.ArrDel15 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Cancelled = null;
					} else {
						this.Cancelled = dis.readFloat();
					}

					this.CancellationCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Diverted = null;
					} else {
						this.Diverted = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRSElapsedTime = null;
					} else {
						this.CRSElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ActualElapsedTime = null;
					} else {
						this.ActualElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AirTime = null;
					} else {
						this.AirTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readFloat();
					}

					this.CarrierDelay = readString(dis);

					this.WeatherDelay = readString(dis);

					this.NASDelay = readString(dis);

					this.SecurityDelay = readString(dis);

					this.LateAircraftDelay = readString(dis);

					this.DivAirportLandings = readInteger(dis);

					this.DivReachedDest = readString(dis);

					this.DivActualElapsedTime = readString(dis);

					this.DivArrDelay = readString(dis);

					this.DivDistance = readString(dis);

					this.Div1Airport = readString(dis);

					this.Div1AirportID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up) {

				try {

					int length = 0;

					this.FlightDate = readDate(dis);

					this.DOT_ID_Marketing_Airline = readInteger(dis);

					this.Operating_Airline = readString(dis);

					this.Flight_Number_Operating_Airline = readString(dis);

					this.OriginAirportID = readInteger(dis);

					this.Origin = readString(dis);

					this.OriginCityName = readString(dis);

					this.OriginState = readString(dis);

					this.OriginStateFips = readString(dis);

					this.OriginStateName = readString(dis);

					this.OriginWac = readInteger(dis);

					this.DestAirportID = readInteger(dis);

					this.Dest = readString(dis);

					this.DestCityName = readString(dis);

					this.DestState = readString(dis);

					this.DestStateFips = readString(dis);

					this.DestStateName = readString(dis);

					this.DestWac = readInteger(dis);

					this.CRSDepTime = readString(dis);

					this.DepTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DepDelayMinutes = null;
					} else {
						this.DepDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DepDel15 = null;
					} else {
						this.DepDel15 = dis.readFloat();
					}

					this.WheelsOff = readString(dis);

					this.WheelsOn = readString(dis);

					this.CRSArrTime = readString(dis);

					this.ArrTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ArrDelayMinutes = null;
					} else {
						this.ArrDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ArrDel15 = null;
					} else {
						this.ArrDel15 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Cancelled = null;
					} else {
						this.Cancelled = dis.readFloat();
					}

					this.CancellationCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Diverted = null;
					} else {
						this.Diverted = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRSElapsedTime = null;
					} else {
						this.CRSElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ActualElapsedTime = null;
					} else {
						this.ActualElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AirTime = null;
					} else {
						this.AirTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readFloat();
					}

					this.CarrierDelay = readString(dis);

					this.WeatherDelay = readString(dis);

					this.NASDelay = readString(dis);

					this.SecurityDelay = readString(dis);

					this.LateAircraftDelay = readString(dis);

					this.DivAirportLandings = readInteger(dis);

					this.DivReachedDest = readString(dis);

					this.DivActualElapsedTime = readString(dis);

					this.DivArrDelay = readString(dis);

					this.DivDistance = readString(dis);

					this.Div1Airport = readString(dis);

					this.Div1AirportID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.FlightDate, dos);

				// Integer

				writeInteger(this.DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this.Operating_Airline, dos);

				// String

				writeString(this.Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this.OriginAirportID, dos);

				// String

				writeString(this.Origin, dos);

				// String

				writeString(this.OriginCityName, dos);

				// String

				writeString(this.OriginState, dos);

				// String

				writeString(this.OriginStateFips, dos);

				// String

				writeString(this.OriginStateName, dos);

				// Integer

				writeInteger(this.OriginWac, dos);

				// Integer

				writeInteger(this.DestAirportID, dos);

				// String

				writeString(this.Dest, dos);

				// String

				writeString(this.DestCityName, dos);

				// String

				writeString(this.DestState, dos);

				// String

				writeString(this.DestStateFips, dos);

				// String

				writeString(this.DestStateName, dos);

				// Integer

				writeInteger(this.DestWac, dos);

				// String

				writeString(this.CRSDepTime, dos);

				// String

				writeString(this.DepTime, dos);

				// Float

				if (this.DepDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDelayMinutes);
				}

				// Float

				if (this.DepDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDel15);
				}

				// String

				writeString(this.WheelsOff, dos);

				// String

				writeString(this.WheelsOn, dos);

				// String

				writeString(this.CRSArrTime, dos);

				// String

				writeString(this.ArrTime, dos);

				// Float

				if (this.ArrDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDelayMinutes);
				}

				// Float

				if (this.ArrDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDel15);
				}

				// Float

				if (this.Cancelled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Cancelled);
				}

				// String

				writeString(this.CancellationCode, dos);

				// Float

				if (this.Diverted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Diverted);
				}

				// Float

				if (this.CRSElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CRSElapsedTime);
				}

				// Float

				if (this.ActualElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ActualElapsedTime);
				}

				// Float

				if (this.AirTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AirTime);
				}

				// Float

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Distance);
				}

				// String

				writeString(this.CarrierDelay, dos);

				// String

				writeString(this.WeatherDelay, dos);

				// String

				writeString(this.NASDelay, dos);

				// String

				writeString(this.SecurityDelay, dos);

				// String

				writeString(this.LateAircraftDelay, dos);

				// Integer

				writeInteger(this.DivAirportLandings, dos);

				// String

				writeString(this.DivReachedDest, dos);

				// String

				writeString(this.DivActualElapsedTime, dos);

				// String

				writeString(this.DivArrDelay, dos);

				// String

				writeString(this.DivDistance, dos);

				// String

				writeString(this.Div1Airport, dos);

				// String

				writeString(this.Div1AirportID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.FlightDate, dos);

				// Integer

				writeInteger(this.DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this.Operating_Airline, dos);

				// String

				writeString(this.Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this.OriginAirportID, dos);

				// String

				writeString(this.Origin, dos);

				// String

				writeString(this.OriginCityName, dos);

				// String

				writeString(this.OriginState, dos);

				// String

				writeString(this.OriginStateFips, dos);

				// String

				writeString(this.OriginStateName, dos);

				// Integer

				writeInteger(this.OriginWac, dos);

				// Integer

				writeInteger(this.DestAirportID, dos);

				// String

				writeString(this.Dest, dos);

				// String

				writeString(this.DestCityName, dos);

				// String

				writeString(this.DestState, dos);

				// String

				writeString(this.DestStateFips, dos);

				// String

				writeString(this.DestStateName, dos);

				// Integer

				writeInteger(this.DestWac, dos);

				// String

				writeString(this.CRSDepTime, dos);

				// String

				writeString(this.DepTime, dos);

				// Float

				if (this.DepDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDelayMinutes);
				}

				// Float

				if (this.DepDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDel15);
				}

				// String

				writeString(this.WheelsOff, dos);

				// String

				writeString(this.WheelsOn, dos);

				// String

				writeString(this.CRSArrTime, dos);

				// String

				writeString(this.ArrTime, dos);

				// Float

				if (this.ArrDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDelayMinutes);
				}

				// Float

				if (this.ArrDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDel15);
				}

				// Float

				if (this.Cancelled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Cancelled);
				}

				// String

				writeString(this.CancellationCode, dos);

				// Float

				if (this.Diverted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Diverted);
				}

				// Float

				if (this.CRSElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CRSElapsedTime);
				}

				// Float

				if (this.ActualElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ActualElapsedTime);
				}

				// Float

				if (this.AirTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AirTime);
				}

				// Float

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Distance);
				}

				// String

				writeString(this.CarrierDelay, dos);

				// String

				writeString(this.WeatherDelay, dos);

				// String

				writeString(this.NASDelay, dos);

				// String

				writeString(this.SecurityDelay, dos);

				// String

				writeString(this.LateAircraftDelay, dos);

				// Integer

				writeInteger(this.DivAirportLandings, dos);

				// String

				writeString(this.DivReachedDest, dos);

				// String

				writeString(this.DivActualElapsedTime, dos);

				// String

				writeString(this.DivArrDelay, dos);

				// String

				writeString(this.DivDistance, dos);

				// String

				writeString(this.Div1Airport, dos);

				// String

				writeString(this.Div1AirportID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FlightDate=" + String.valueOf(FlightDate));
			sb.append(",DOT_ID_Marketing_Airline=" + String.valueOf(DOT_ID_Marketing_Airline));
			sb.append(",Operating_Airline=" + Operating_Airline);
			sb.append(",Flight_Number_Operating_Airline=" + Flight_Number_Operating_Airline);
			sb.append(",OriginAirportID=" + String.valueOf(OriginAirportID));
			sb.append(",Origin=" + Origin);
			sb.append(",OriginCityName=" + OriginCityName);
			sb.append(",OriginState=" + OriginState);
			sb.append(",OriginStateFips=" + OriginStateFips);
			sb.append(",OriginStateName=" + OriginStateName);
			sb.append(",OriginWac=" + String.valueOf(OriginWac));
			sb.append(",DestAirportID=" + String.valueOf(DestAirportID));
			sb.append(",Dest=" + Dest);
			sb.append(",DestCityName=" + DestCityName);
			sb.append(",DestState=" + DestState);
			sb.append(",DestStateFips=" + DestStateFips);
			sb.append(",DestStateName=" + DestStateName);
			sb.append(",DestWac=" + String.valueOf(DestWac));
			sb.append(",CRSDepTime=" + CRSDepTime);
			sb.append(",DepTime=" + DepTime);
			sb.append(",DepDelayMinutes=" + String.valueOf(DepDelayMinutes));
			sb.append(",DepDel15=" + String.valueOf(DepDel15));
			sb.append(",WheelsOff=" + WheelsOff);
			sb.append(",WheelsOn=" + WheelsOn);
			sb.append(",CRSArrTime=" + CRSArrTime);
			sb.append(",ArrTime=" + ArrTime);
			sb.append(",ArrDelayMinutes=" + String.valueOf(ArrDelayMinutes));
			sb.append(",ArrDel15=" + String.valueOf(ArrDel15));
			sb.append(",Cancelled=" + String.valueOf(Cancelled));
			sb.append(",CancellationCode=" + CancellationCode);
			sb.append(",Diverted=" + String.valueOf(Diverted));
			sb.append(",CRSElapsedTime=" + String.valueOf(CRSElapsedTime));
			sb.append(",ActualElapsedTime=" + String.valueOf(ActualElapsedTime));
			sb.append(",AirTime=" + String.valueOf(AirTime));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",CarrierDelay=" + CarrierDelay);
			sb.append(",WeatherDelay=" + WeatherDelay);
			sb.append(",NASDelay=" + NASDelay);
			sb.append(",SecurityDelay=" + SecurityDelay);
			sb.append(",LateAircraftDelay=" + LateAircraftDelay);
			sb.append(",DivAirportLandings=" + String.valueOf(DivAirportLandings));
			sb.append(",DivReachedDest=" + DivReachedDest);
			sb.append(",DivActualElapsedTime=" + DivActualElapsedTime);
			sb.append(",DivArrDelay=" + DivArrDelay);
			sb.append(",DivDistance=" + DivDistance);
			sb.append(",Div1Airport=" + Div1Airport);
			sb.append(",Div1AirportID=" + Div1AirportID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_3Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_3Struct> {
		final static byte[] commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up = new byte[0];
		static byte[] commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[0];

		public java.util.Date FlightDate;

		public java.util.Date getFlightDate() {
			return this.FlightDate;
		}

		public Integer DOT_ID_Marketing_Airline;

		public Integer getDOT_ID_Marketing_Airline() {
			return this.DOT_ID_Marketing_Airline;
		}

		public String Operating_Airline;

		public String getOperating_Airline() {
			return this.Operating_Airline;
		}

		public String Flight_Number_Operating_Airline;

		public String getFlight_Number_Operating_Airline() {
			return this.Flight_Number_Operating_Airline;
		}

		public Integer OriginAirportID;

		public Integer getOriginAirportID() {
			return this.OriginAirportID;
		}

		public String Origin;

		public String getOrigin() {
			return this.Origin;
		}

		public String OriginCityName;

		public String getOriginCityName() {
			return this.OriginCityName;
		}

		public String OriginState;

		public String getOriginState() {
			return this.OriginState;
		}

		public String OriginStateFips;

		public String getOriginStateFips() {
			return this.OriginStateFips;
		}

		public String OriginStateName;

		public String getOriginStateName() {
			return this.OriginStateName;
		}

		public Integer OriginWac;

		public Integer getOriginWac() {
			return this.OriginWac;
		}

		public Integer DestAirportID;

		public Integer getDestAirportID() {
			return this.DestAirportID;
		}

		public String Dest;

		public String getDest() {
			return this.Dest;
		}

		public String DestCityName;

		public String getDestCityName() {
			return this.DestCityName;
		}

		public String DestState;

		public String getDestState() {
			return this.DestState;
		}

		public String DestStateFips;

		public String getDestStateFips() {
			return this.DestStateFips;
		}

		public String DestStateName;

		public String getDestStateName() {
			return this.DestStateName;
		}

		public Integer DestWac;

		public Integer getDestWac() {
			return this.DestWac;
		}

		public String CRSDepTime;

		public String getCRSDepTime() {
			return this.CRSDepTime;
		}

		public String DepTime;

		public String getDepTime() {
			return this.DepTime;
		}

		public Float DepDelayMinutes;

		public Float getDepDelayMinutes() {
			return this.DepDelayMinutes;
		}

		public Float DepDel15;

		public Float getDepDel15() {
			return this.DepDel15;
		}

		public String WheelsOff;

		public String getWheelsOff() {
			return this.WheelsOff;
		}

		public String WheelsOn;

		public String getWheelsOn() {
			return this.WheelsOn;
		}

		public String CRSArrTime;

		public String getCRSArrTime() {
			return this.CRSArrTime;
		}

		public String ArrTime;

		public String getArrTime() {
			return this.ArrTime;
		}

		public Float ArrDelayMinutes;

		public Float getArrDelayMinutes() {
			return this.ArrDelayMinutes;
		}

		public Float ArrDel15;

		public Float getArrDel15() {
			return this.ArrDel15;
		}

		public Float Cancelled;

		public Float getCancelled() {
			return this.Cancelled;
		}

		public String CancellationCode;

		public String getCancellationCode() {
			return this.CancellationCode;
		}

		public Float Diverted;

		public Float getDiverted() {
			return this.Diverted;
		}

		public Float CRSElapsedTime;

		public Float getCRSElapsedTime() {
			return this.CRSElapsedTime;
		}

		public Float ActualElapsedTime;

		public Float getActualElapsedTime() {
			return this.ActualElapsedTime;
		}

		public Float AirTime;

		public Float getAirTime() {
			return this.AirTime;
		}

		public Float Distance;

		public Float getDistance() {
			return this.Distance;
		}

		public String CarrierDelay;

		public String getCarrierDelay() {
			return this.CarrierDelay;
		}

		public String WeatherDelay;

		public String getWeatherDelay() {
			return this.WeatherDelay;
		}

		public String NASDelay;

		public String getNASDelay() {
			return this.NASDelay;
		}

		public String SecurityDelay;

		public String getSecurityDelay() {
			return this.SecurityDelay;
		}

		public String LateAircraftDelay;

		public String getLateAircraftDelay() {
			return this.LateAircraftDelay;
		}

		public Integer DivAirportLandings;

		public Integer getDivAirportLandings() {
			return this.DivAirportLandings;
		}

		public String DivReachedDest;

		public String getDivReachedDest() {
			return this.DivReachedDest;
		}

		public String DivActualElapsedTime;

		public String getDivActualElapsedTime() {
			return this.DivActualElapsedTime;
		}

		public String DivArrDelay;

		public String getDivArrDelay() {
			return this.DivArrDelay;
		}

		public String DivDistance;

		public String getDivDistance() {
			return this.DivDistance;
		}

		public String Div1Airport;

		public String getDiv1Airport() {
			return this.Div1Airport;
		}

		public String Div1AirportID;

		public String getDiv1AirportID() {
			return this.Div1AirportID;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL3_GE11002_factVuelo_up.length) {
					if (length < 1024 && commonByteArray_PARCIAL3_GE11002_factVuelo_up.length == 0) {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[1024];
					} else {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length);
				strReturn = new String(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL3_GE11002_factVuelo_up.length) {
					if (length < 1024 && commonByteArray_PARCIAL3_GE11002_factVuelo_up.length == 0) {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[1024];
					} else {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length);
				strReturn = new String(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up) {

				try {

					int length = 0;

					this.FlightDate = readDate(dis);

					this.DOT_ID_Marketing_Airline = readInteger(dis);

					this.Operating_Airline = readString(dis);

					this.Flight_Number_Operating_Airline = readString(dis);

					this.OriginAirportID = readInteger(dis);

					this.Origin = readString(dis);

					this.OriginCityName = readString(dis);

					this.OriginState = readString(dis);

					this.OriginStateFips = readString(dis);

					this.OriginStateName = readString(dis);

					this.OriginWac = readInteger(dis);

					this.DestAirportID = readInteger(dis);

					this.Dest = readString(dis);

					this.DestCityName = readString(dis);

					this.DestState = readString(dis);

					this.DestStateFips = readString(dis);

					this.DestStateName = readString(dis);

					this.DestWac = readInteger(dis);

					this.CRSDepTime = readString(dis);

					this.DepTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DepDelayMinutes = null;
					} else {
						this.DepDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DepDel15 = null;
					} else {
						this.DepDel15 = dis.readFloat();
					}

					this.WheelsOff = readString(dis);

					this.WheelsOn = readString(dis);

					this.CRSArrTime = readString(dis);

					this.ArrTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ArrDelayMinutes = null;
					} else {
						this.ArrDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ArrDel15 = null;
					} else {
						this.ArrDel15 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Cancelled = null;
					} else {
						this.Cancelled = dis.readFloat();
					}

					this.CancellationCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Diverted = null;
					} else {
						this.Diverted = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRSElapsedTime = null;
					} else {
						this.CRSElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ActualElapsedTime = null;
					} else {
						this.ActualElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AirTime = null;
					} else {
						this.AirTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readFloat();
					}

					this.CarrierDelay = readString(dis);

					this.WeatherDelay = readString(dis);

					this.NASDelay = readString(dis);

					this.SecurityDelay = readString(dis);

					this.LateAircraftDelay = readString(dis);

					this.DivAirportLandings = readInteger(dis);

					this.DivReachedDest = readString(dis);

					this.DivActualElapsedTime = readString(dis);

					this.DivArrDelay = readString(dis);

					this.DivDistance = readString(dis);

					this.Div1Airport = readString(dis);

					this.Div1AirportID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up) {

				try {

					int length = 0;

					this.FlightDate = readDate(dis);

					this.DOT_ID_Marketing_Airline = readInteger(dis);

					this.Operating_Airline = readString(dis);

					this.Flight_Number_Operating_Airline = readString(dis);

					this.OriginAirportID = readInteger(dis);

					this.Origin = readString(dis);

					this.OriginCityName = readString(dis);

					this.OriginState = readString(dis);

					this.OriginStateFips = readString(dis);

					this.OriginStateName = readString(dis);

					this.OriginWac = readInteger(dis);

					this.DestAirportID = readInteger(dis);

					this.Dest = readString(dis);

					this.DestCityName = readString(dis);

					this.DestState = readString(dis);

					this.DestStateFips = readString(dis);

					this.DestStateName = readString(dis);

					this.DestWac = readInteger(dis);

					this.CRSDepTime = readString(dis);

					this.DepTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DepDelayMinutes = null;
					} else {
						this.DepDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DepDel15 = null;
					} else {
						this.DepDel15 = dis.readFloat();
					}

					this.WheelsOff = readString(dis);

					this.WheelsOn = readString(dis);

					this.CRSArrTime = readString(dis);

					this.ArrTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ArrDelayMinutes = null;
					} else {
						this.ArrDelayMinutes = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ArrDel15 = null;
					} else {
						this.ArrDel15 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Cancelled = null;
					} else {
						this.Cancelled = dis.readFloat();
					}

					this.CancellationCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Diverted = null;
					} else {
						this.Diverted = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CRSElapsedTime = null;
					} else {
						this.CRSElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ActualElapsedTime = null;
					} else {
						this.ActualElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AirTime = null;
					} else {
						this.AirTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Distance = null;
					} else {
						this.Distance = dis.readFloat();
					}

					this.CarrierDelay = readString(dis);

					this.WeatherDelay = readString(dis);

					this.NASDelay = readString(dis);

					this.SecurityDelay = readString(dis);

					this.LateAircraftDelay = readString(dis);

					this.DivAirportLandings = readInteger(dis);

					this.DivReachedDest = readString(dis);

					this.DivActualElapsedTime = readString(dis);

					this.DivArrDelay = readString(dis);

					this.DivDistance = readString(dis);

					this.Div1Airport = readString(dis);

					this.Div1AirportID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.FlightDate, dos);

				// Integer

				writeInteger(this.DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this.Operating_Airline, dos);

				// String

				writeString(this.Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this.OriginAirportID, dos);

				// String

				writeString(this.Origin, dos);

				// String

				writeString(this.OriginCityName, dos);

				// String

				writeString(this.OriginState, dos);

				// String

				writeString(this.OriginStateFips, dos);

				// String

				writeString(this.OriginStateName, dos);

				// Integer

				writeInteger(this.OriginWac, dos);

				// Integer

				writeInteger(this.DestAirportID, dos);

				// String

				writeString(this.Dest, dos);

				// String

				writeString(this.DestCityName, dos);

				// String

				writeString(this.DestState, dos);

				// String

				writeString(this.DestStateFips, dos);

				// String

				writeString(this.DestStateName, dos);

				// Integer

				writeInteger(this.DestWac, dos);

				// String

				writeString(this.CRSDepTime, dos);

				// String

				writeString(this.DepTime, dos);

				// Float

				if (this.DepDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDelayMinutes);
				}

				// Float

				if (this.DepDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDel15);
				}

				// String

				writeString(this.WheelsOff, dos);

				// String

				writeString(this.WheelsOn, dos);

				// String

				writeString(this.CRSArrTime, dos);

				// String

				writeString(this.ArrTime, dos);

				// Float

				if (this.ArrDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDelayMinutes);
				}

				// Float

				if (this.ArrDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDel15);
				}

				// Float

				if (this.Cancelled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Cancelled);
				}

				// String

				writeString(this.CancellationCode, dos);

				// Float

				if (this.Diverted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Diverted);
				}

				// Float

				if (this.CRSElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CRSElapsedTime);
				}

				// Float

				if (this.ActualElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ActualElapsedTime);
				}

				// Float

				if (this.AirTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AirTime);
				}

				// Float

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Distance);
				}

				// String

				writeString(this.CarrierDelay, dos);

				// String

				writeString(this.WeatherDelay, dos);

				// String

				writeString(this.NASDelay, dos);

				// String

				writeString(this.SecurityDelay, dos);

				// String

				writeString(this.LateAircraftDelay, dos);

				// Integer

				writeInteger(this.DivAirportLandings, dos);

				// String

				writeString(this.DivReachedDest, dos);

				// String

				writeString(this.DivActualElapsedTime, dos);

				// String

				writeString(this.DivArrDelay, dos);

				// String

				writeString(this.DivDistance, dos);

				// String

				writeString(this.Div1Airport, dos);

				// String

				writeString(this.Div1AirportID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.FlightDate, dos);

				// Integer

				writeInteger(this.DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this.Operating_Airline, dos);

				// String

				writeString(this.Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this.OriginAirportID, dos);

				// String

				writeString(this.Origin, dos);

				// String

				writeString(this.OriginCityName, dos);

				// String

				writeString(this.OriginState, dos);

				// String

				writeString(this.OriginStateFips, dos);

				// String

				writeString(this.OriginStateName, dos);

				// Integer

				writeInteger(this.OriginWac, dos);

				// Integer

				writeInteger(this.DestAirportID, dos);

				// String

				writeString(this.Dest, dos);

				// String

				writeString(this.DestCityName, dos);

				// String

				writeString(this.DestState, dos);

				// String

				writeString(this.DestStateFips, dos);

				// String

				writeString(this.DestStateName, dos);

				// Integer

				writeInteger(this.DestWac, dos);

				// String

				writeString(this.CRSDepTime, dos);

				// String

				writeString(this.DepTime, dos);

				// Float

				if (this.DepDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDelayMinutes);
				}

				// Float

				if (this.DepDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DepDel15);
				}

				// String

				writeString(this.WheelsOff, dos);

				// String

				writeString(this.WheelsOn, dos);

				// String

				writeString(this.CRSArrTime, dos);

				// String

				writeString(this.ArrTime, dos);

				// Float

				if (this.ArrDelayMinutes == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDelayMinutes);
				}

				// Float

				if (this.ArrDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ArrDel15);
				}

				// Float

				if (this.Cancelled == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Cancelled);
				}

				// String

				writeString(this.CancellationCode, dos);

				// Float

				if (this.Diverted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Diverted);
				}

				// Float

				if (this.CRSElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CRSElapsedTime);
				}

				// Float

				if (this.ActualElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ActualElapsedTime);
				}

				// Float

				if (this.AirTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AirTime);
				}

				// Float

				if (this.Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Distance);
				}

				// String

				writeString(this.CarrierDelay, dos);

				// String

				writeString(this.WeatherDelay, dos);

				// String

				writeString(this.NASDelay, dos);

				// String

				writeString(this.SecurityDelay, dos);

				// String

				writeString(this.LateAircraftDelay, dos);

				// Integer

				writeInteger(this.DivAirportLandings, dos);

				// String

				writeString(this.DivReachedDest, dos);

				// String

				writeString(this.DivActualElapsedTime, dos);

				// String

				writeString(this.DivArrDelay, dos);

				// String

				writeString(this.DivDistance, dos);

				// String

				writeString(this.Div1Airport, dos);

				// String

				writeString(this.Div1AirportID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FlightDate=" + String.valueOf(FlightDate));
			sb.append(",DOT_ID_Marketing_Airline=" + String.valueOf(DOT_ID_Marketing_Airline));
			sb.append(",Operating_Airline=" + Operating_Airline);
			sb.append(",Flight_Number_Operating_Airline=" + Flight_Number_Operating_Airline);
			sb.append(",OriginAirportID=" + String.valueOf(OriginAirportID));
			sb.append(",Origin=" + Origin);
			sb.append(",OriginCityName=" + OriginCityName);
			sb.append(",OriginState=" + OriginState);
			sb.append(",OriginStateFips=" + OriginStateFips);
			sb.append(",OriginStateName=" + OriginStateName);
			sb.append(",OriginWac=" + String.valueOf(OriginWac));
			sb.append(",DestAirportID=" + String.valueOf(DestAirportID));
			sb.append(",Dest=" + Dest);
			sb.append(",DestCityName=" + DestCityName);
			sb.append(",DestState=" + DestState);
			sb.append(",DestStateFips=" + DestStateFips);
			sb.append(",DestStateName=" + DestStateName);
			sb.append(",DestWac=" + String.valueOf(DestWac));
			sb.append(",CRSDepTime=" + CRSDepTime);
			sb.append(",DepTime=" + DepTime);
			sb.append(",DepDelayMinutes=" + String.valueOf(DepDelayMinutes));
			sb.append(",DepDel15=" + String.valueOf(DepDel15));
			sb.append(",WheelsOff=" + WheelsOff);
			sb.append(",WheelsOn=" + WheelsOn);
			sb.append(",CRSArrTime=" + CRSArrTime);
			sb.append(",ArrTime=" + ArrTime);
			sb.append(",ArrDelayMinutes=" + String.valueOf(ArrDelayMinutes));
			sb.append(",ArrDel15=" + String.valueOf(ArrDel15));
			sb.append(",Cancelled=" + String.valueOf(Cancelled));
			sb.append(",CancellationCode=" + CancellationCode);
			sb.append(",Diverted=" + String.valueOf(Diverted));
			sb.append(",CRSElapsedTime=" + String.valueOf(CRSElapsedTime));
			sb.append(",ActualElapsedTime=" + String.valueOf(ActualElapsedTime));
			sb.append(",AirTime=" + String.valueOf(AirTime));
			sb.append(",Distance=" + String.valueOf(Distance));
			sb.append(",CarrierDelay=" + CarrierDelay);
			sb.append(",WeatherDelay=" + WeatherDelay);
			sb.append(",NASDelay=" + NASDelay);
			sb.append(",SecurityDelay=" + SecurityDelay);
			sb.append(",LateAircraftDelay=" + LateAircraftDelay);
			sb.append(",DivAirportLandings=" + String.valueOf(DivAirportLandings));
			sb.append(",DivReachedDest=" + DivReachedDest);
			sb.append(",DivActualElapsedTime=" + DivActualElapsedTime);
			sb.append(",DivArrDelay=" + DivArrDelay);
			sb.append(",DivDistance=" + DivDistance);
			sb.append(",Div1Airport=" + Div1Airport);
			sb.append(",Div1AirportID=" + Div1AirportID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_1Process(globalMap);
				tFileInputDelimited_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				factvuelosStruct factvuelos = new factvuelosStruct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "factvuelos");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Parcial3/Access/factVuelo.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				factvuelosStruct factvuelos_tmp = new factvuelosStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/Parcial3/Processing/flights.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Parcial3/Processing/flights.csv", "UTF-8", ",", "\n", false, 1, 0,
								limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.FlightDate = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"FlightDate", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.FlightDate = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 1;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.DOT_ID_Marketing_Airline = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DOT_ID_Marketing_Airline", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.DOT_ID_Marketing_Airline = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 2;

							row1.Operating_Airline = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 3;

							row1.Flight_Number_Operating_Airline = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 4;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.OriginAirportID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"OriginAirportID", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.OriginAirportID = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 5;

							row1.Origin = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 6;

							row1.OriginCityName = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 7;

							row1.OriginState = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 8;

							row1.OriginStateFips = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 9;

							row1.OriginStateName = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 10;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.OriginWac = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"OriginWac", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.OriginWac = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 11;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.DestAirportID = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DestAirportID", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.DestAirportID = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 12;

							row1.Dest = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 13;

							row1.DestCityName = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 14;

							row1.DestState = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 15;

							row1.DestStateFips = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 16;

							row1.DestStateName = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 17;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.DestWac = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DestWac", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.DestWac = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 18;

							row1.CRSDepTime = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 19;

							row1.DepTime = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 20;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.DepDelayMinutes = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DepDelayMinutes", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.DepDelayMinutes = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 21;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.DepDel15 = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DepDel15", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.DepDel15 = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 22;

							row1.WheelsOff = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 23;

							row1.WheelsOn = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 24;

							row1.CRSArrTime = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 25;

							row1.ArrTime = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 26;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.ArrDelayMinutes = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ArrDelayMinutes", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.ArrDelayMinutes = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 27;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.ArrDel15 = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ArrDel15", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.ArrDel15 = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 28;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.Cancelled = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Cancelled", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.Cancelled = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 29;

							row1.CancellationCode = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 30;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.Diverted = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Diverted", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.Diverted = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 31;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.CRSElapsedTime = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CRSElapsedTime", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.CRSElapsedTime = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 32;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.ActualElapsedTime = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ActualElapsedTime", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.ActualElapsedTime = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 33;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.AirTime = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"AirTime", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.AirTime = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 34;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.Distance = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Distance", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.Distance = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 35;

							row1.CarrierDelay = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 36;

							row1.WeatherDelay = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 37;

							row1.NASDelay = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 38;

							row1.SecurityDelay = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 39;

							row1.LateAircraftDelay = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 40;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row1.DivAirportLandings = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
											ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DivAirportLandings", "row1", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row1.DivAirportLandings = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 41;

							row1.DivReachedDest = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 42;

							row1.DivActualElapsedTime = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 43;

							row1.DivArrDelay = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 44;

							row1.DivDistance = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 45;

							row1.Div1Airport = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 46;

							row1.Div1AirportID = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row2"
							///////////////////////////////////////////////

							boolean forceLooprow2 = false;

							row2Struct row2ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row2HashKey.airlineID = row1.Operating_Airline;

								row2HashKey.hashCodeDirty = true;

								tHash_Lookup_row2.lookup(row2HashKey);

								if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

									forceLooprow2 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow2 = true;
							} // G 21

							row2Struct row2 = null;

							while ((tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) || forceLooprow2) { // G_TM_M_043

								// CALL close loop of lookup 'row2'

								row2Struct fromLookup_row2 = null;
								row2 = row2Default;

								if (!forceLooprow2) { // G 46

									fromLookup_row2 = tHash_Lookup_row2.next();

									if (fromLookup_row2 != null) {
										row2 = fromLookup_row2;
									}

								} // G 46

								forceLooprow2 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row3"
								///////////////////////////////////////////////

								boolean forceLooprow3 = false;

								row3Struct row3ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row3HashKey.fullDate = row1.FlightDate == null ? null
											: new java.util.Date(row1.FlightDate.getTime());

									row3HashKey.hashCodeDirty = true;

									tHash_Lookup_row3.lookup(row3HashKey);

									if (!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_1 = true;

										forceLooprow3 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow3 = true;
								} // G 21

								row3Struct row3 = null;

								while ((tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) || forceLooprow3) { // G_TM_M_043

									// CALL close loop of lookup 'row3'

									row3Struct fromLookup_row3 = null;
									row3 = row3Default;

									if (!forceLooprow3) { // G 46

										fromLookup_row3 = tHash_Lookup_row3.next();

										if (fromLookup_row3 != null) {
											row3 = fromLookup_row3;
										}

									} // G 46

									forceLooprow3 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
										// ###############################
										// # Output tables

										factvuelos = null;

										if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'factvuelos'
											factvuelos_tmp.fechaKey = row3.fechaKey;
											factvuelos_tmp.airlineKey = row2.airlineKey;
											factvuelos_tmp.Flight_Number_Operating_Airline = row1.Flight_Number_Operating_Airline;
											factvuelos_tmp.OriginAirportID = row1.OriginAirportID;
											factvuelos_tmp.OriginCityName = row1.OriginCityName;
											factvuelos_tmp.OriginState = row1.OriginState;
											factvuelos_tmp.OriginStateName = row1.OriginStateName;
											factvuelos_tmp.DestAirportID = row1.DestAirportID;
											factvuelos_tmp.DestCityName = row1.DestCityName;
											factvuelos_tmp.DestState = row1.DestState;
											factvuelos_tmp.DestStateName = row1.DestStateName;
											factvuelos_tmp.CRSDepTime = row1.CRSDepTime;
											factvuelos_tmp.DepTime = row1.DepTime;
											factvuelos_tmp.DepDelayMinutes = row1.DepDelayMinutes;
											factvuelos_tmp.DepDel15 = row1.DepDel15;
											factvuelos_tmp.WheelsOff = row1.WheelsOff;
											factvuelos_tmp.WheelsOn = row1.WheelsOn;
											factvuelos_tmp.CRSArrTime = row1.CRSArrTime;
											factvuelos_tmp.ArrTime = row1.ArrTime;
											factvuelos_tmp.ArrDelayMinutes = row1.ArrDelayMinutes;
											factvuelos_tmp.ArrDel15 = row1.ArrDel15;
											factvuelos_tmp.Cancelled = row1.Cancelled;
											factvuelos_tmp.Diverted = row1.Diverted;
											factvuelos_tmp.CRSElapsedTime = row1.CRSElapsedTime;
											factvuelos_tmp.ActualElapsedTime = row1.ActualElapsedTime;
											factvuelos_tmp.AirTime = row1.AirTime;
											factvuelos_tmp.CarrierDelay = row1.CarrierDelay;
											factvuelos_tmp.WeatherDelay = row1.WeatherDelay;
											factvuelos_tmp.NASDelay = row1.NASDelay;
											factvuelos_tmp.SecurityDelay = row1.SecurityDelay;
											factvuelos_tmp.LateAircraftDelay = row1.LateAircraftDelay;
											factvuelos_tmp.DivAirportLandings = row1.DivAirportLandings;
											factvuelos_tmp.DivReachedDest = row1.DivReachedDest;
											factvuelos_tmp.DivActualElapsedTime = row1.DivActualElapsedTime;
											factvuelos_tmp.DivArrDelay = row1.DivArrDelay;
											factvuelos = factvuelos_tmp;
										} // closing inner join bracket (2)
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */

									/**
									 * [tMap_1 process_data_begin ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_begin ] stop
									 */
// Start of branch "factvuelos"
									if (factvuelos != null) {

										/**
										 * [tFileOutputDelimited_1 main ] start
										 */

										currentComponent = "tFileOutputDelimited_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "factvuelos"

											);
										}

										StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
										if (factvuelos.fechaKey != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.fechaKey);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.airlineKey != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.airlineKey);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.Flight_Number_Operating_Airline != null) {
											sb_tFileOutputDelimited_1
													.append(factvuelos.Flight_Number_Operating_Airline);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.OriginAirportID != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.OriginAirportID);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.OriginCityName != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.OriginCityName);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.OriginState != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.OriginState);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.OriginStateName != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.OriginStateName);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.DestAirportID != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.DestAirportID);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.DestCityName != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.DestCityName);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.DestState != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.DestState);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.DestStateName != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.DestStateName);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.CRSDepTime != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.CRSDepTime);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.DepTime != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.DepTime);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.DepDelayMinutes != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.DepDelayMinutes);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.DepDel15 != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.DepDel15);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.WheelsOff != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.WheelsOff);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.WheelsOn != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.WheelsOn);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.CRSArrTime != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.CRSArrTime);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.ArrTime != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.ArrTime);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.ArrDelayMinutes != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.ArrDelayMinutes);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.ArrDel15 != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.ArrDel15);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.Cancelled != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.Cancelled);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.Diverted != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.Diverted);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.CRSElapsedTime != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.CRSElapsedTime);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.ActualElapsedTime != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.ActualElapsedTime);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.AirTime != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.AirTime);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.CarrierDelay != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.CarrierDelay);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.WeatherDelay != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.WeatherDelay);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.NASDelay != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.NASDelay);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.SecurityDelay != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.SecurityDelay);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.LateAircraftDelay != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.LateAircraftDelay);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.DivAirportLandings != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.DivAirportLandings);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.DivReachedDest != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.DivReachedDest);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.DivActualElapsedTime != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.DivActualElapsedTime);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
										if (factvuelos.DivArrDelay != null) {
											sb_tFileOutputDelimited_1.append(factvuelos.DivArrDelay);
										}
										sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

										nb_line_tFileOutputDelimited_1++;
										resourceMap.put("nb_line_tFileOutputDelimited_1",
												nb_line_tFileOutputDelimited_1);

										outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

										tos_count_tFileOutputDelimited_1++;

										/**
										 * [tFileOutputDelimited_1 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_1 process_data_begin ] start
										 */

										currentComponent = "tFileOutputDelimited_1";

										/**
										 * [tFileOutputDelimited_1 process_data_begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_1 process_data_end ] start
										 */

										currentComponent = "tFileOutputDelimited_1";

										/**
										 * [tFileOutputDelimited_1 process_data_end ] stop
										 */

									} // End of branch "factvuelos"

								} // close loop of lookup 'row3' // G_TM_M_043

							} // close loop of lookup 'row2' // G_TM_M_043

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/Parcial3/Processing/flights.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "factvuelos");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up = new byte[0];
		static byte[] commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer airlineKey;

		public Integer getAirlineKey() {
			return this.airlineKey;
		}

		public String airlineID;

		public String getAirlineID() {
			return this.airlineID;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.airlineID == null) ? 0 : this.airlineID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.airlineID == null) {
				if (other.airlineID != null)
					return false;

			} else if (!this.airlineID.equals(other.airlineID))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.airlineKey = this.airlineKey;
			other.airlineID = this.airlineID;
			other.Description = this.Description;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.airlineID = this.airlineID;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL3_GE11002_factVuelo_up.length) {
					if (length < 1024 && commonByteArray_PARCIAL3_GE11002_factVuelo_up.length == 0) {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[1024];
					} else {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length);
				strReturn = new String(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARCIAL3_GE11002_factVuelo_up.length) {
					if (length < 1024 && commonByteArray_PARCIAL3_GE11002_factVuelo_up.length == 0) {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[1024];
					} else {
						commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length);
				strReturn = new String(commonByteArray_PARCIAL3_GE11002_factVuelo_up, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up) {

				try {

					int length = 0;

					this.airlineID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up) {

				try {

					int length = 0;

					this.airlineID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.airlineID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.airlineID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.airlineKey = readInteger(dis, ois);

				this.Description = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.airlineKey = readInteger(dis, objectIn);

				this.Description = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.airlineKey, dos, oos);

				writeString(this.Description, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.airlineKey, dos, objectOut);

				writeString(this.Description, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("airlineKey=" + String.valueOf(airlineKey));
			sb.append(",airlineID=" + airlineID);
			sb.append(",Description=" + Description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.airlineID, other.airlineID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tFileInputDelimited_1 - inputs:(after_tFileInputDelimited_3)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2)
				// outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3) outputs:(factvuelos)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Parcial3/Access/dimAerolinea.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Parcial3/Access/dimAerolinea.csv", "UTF-8", ";", "\n", false, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row2 = null;

						row2 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.airlineKey = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
											ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"airlineKey", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.airlineKey = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row2.airlineID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row2.Description = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tAdvancedHash_row2 main ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row2"

								);
							}

							row2Struct row2_HashRow = new row2Struct();

							row2_HashRow.airlineKey = row2.airlineKey;

							row2_HashRow.airlineID = row2.airlineID;

							row2_HashRow.Description = row2.Description;

							tHash_Lookup_row2.put(row2_HashRow);

							tos_count_tAdvancedHash_row2++;

							/**
							 * [tAdvancedHash_row2 main ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Parcial3/Access/dimAerolinea.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up = new byte[0];
		static byte[] commonByteArray_PARCIAL3_GE11002_factVuelo_up = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer fechaKey;

		public Integer getFechaKey() {
			return this.fechaKey;
		}

		public java.util.Date fullDate;

		public java.util.Date getFullDate() {
			return this.fullDate;
		}

		public String nombreDia;

		public String getNombreDia() {
			return this.nombreDia;
		}

		public Integer diaDeSemana;

		public Integer getDiaDeSemana() {
			return this.diaDeSemana;
		}

		public Integer numDiaEnMes;

		public Integer getNumDiaEnMes() {
			return this.numDiaEnMes;
		}

		public Integer mes;

		public Integer getMes() {
			return this.mes;
		}

		public String nombreMes;

		public String getNombreMes() {
			return this.nombreMes;
		}

		public Integer numSemanaEnMes;

		public Integer getNumSemanaEnMes() {
			return this.numSemanaEnMes;
		}

		public Integer numSemanaEnAnio;

		public Integer getNumSemanaEnAnio() {
			return this.numSemanaEnAnio;
		}

		public Integer trimestre;

		public Integer getTrimestre() {
			return this.trimestre;
		}

		public String nombreTrimestre;

		public String getNombreTrimestre() {
			return this.nombreTrimestre;
		}

		public Character diaLaboral;

		public Character getDiaLaboral() {
			return this.diaLaboral;
		}

		public Integer anio;

		public Integer getAnio() {
			return this.anio;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.fullDate == null) ? 0 : this.fullDate.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.fullDate == null) {
				if (other.fullDate != null)
					return false;

			} else if (!this.fullDate.equals(other.fullDate))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.fechaKey = this.fechaKey;
			other.fullDate = this.fullDate;
			other.nombreDia = this.nombreDia;
			other.diaDeSemana = this.diaDeSemana;
			other.numDiaEnMes = this.numDiaEnMes;
			other.mes = this.mes;
			other.nombreMes = this.nombreMes;
			other.numSemanaEnMes = this.numSemanaEnMes;
			other.numSemanaEnAnio = this.numSemanaEnAnio;
			other.trimestre = this.trimestre;
			other.nombreTrimestre = this.nombreTrimestre;
			other.diaLaboral = this.diaLaboral;
			other.anio = this.anio;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.fullDate = this.fullDate;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up) {

				try {

					int length = 0;

					this.fullDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARCIAL3_GE11002_factVuelo_up) {

				try {

					int length = 0;

					this.fullDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.fullDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.fullDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.fechaKey = readInteger(dis, ois);

				this.nombreDia = readString(dis, ois);

				this.diaDeSemana = readInteger(dis, ois);

				this.numDiaEnMes = readInteger(dis, ois);

				this.mes = readInteger(dis, ois);

				this.nombreMes = readString(dis, ois);

				this.numSemanaEnMes = readInteger(dis, ois);

				this.numSemanaEnAnio = readInteger(dis, ois);

				this.trimestre = readInteger(dis, ois);

				this.nombreTrimestre = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.diaLaboral = null;
				} else {
					this.diaLaboral = dis.readChar();
				}

				this.anio = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.fechaKey = readInteger(dis, objectIn);

				this.nombreDia = readString(dis, objectIn);

				this.diaDeSemana = readInteger(dis, objectIn);

				this.numDiaEnMes = readInteger(dis, objectIn);

				this.mes = readInteger(dis, objectIn);

				this.nombreMes = readString(dis, objectIn);

				this.numSemanaEnMes = readInteger(dis, objectIn);

				this.numSemanaEnAnio = readInteger(dis, objectIn);

				this.trimestre = readInteger(dis, objectIn);

				this.nombreTrimestre = readString(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.diaLaboral = null;
				} else {
					this.diaLaboral = objectIn.readChar();
				}

				this.anio = readInteger(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.fechaKey, dos, oos);

				writeString(this.nombreDia, dos, oos);

				writeInteger(this.diaDeSemana, dos, oos);

				writeInteger(this.numDiaEnMes, dos, oos);

				writeInteger(this.mes, dos, oos);

				writeString(this.nombreMes, dos, oos);

				writeInteger(this.numSemanaEnMes, dos, oos);

				writeInteger(this.numSemanaEnAnio, dos, oos);

				writeInteger(this.trimestre, dos, oos);

				writeString(this.nombreTrimestre, dos, oos);

				if (this.diaLaboral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.diaLaboral);
				}

				writeInteger(this.anio, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.fechaKey, dos, objectOut);

				writeString(this.nombreDia, dos, objectOut);

				writeInteger(this.diaDeSemana, dos, objectOut);

				writeInteger(this.numDiaEnMes, dos, objectOut);

				writeInteger(this.mes, dos, objectOut);

				writeString(this.nombreMes, dos, objectOut);

				writeInteger(this.numSemanaEnMes, dos, objectOut);

				writeInteger(this.numSemanaEnAnio, dos, objectOut);

				writeInteger(this.trimestre, dos, objectOut);

				writeString(this.nombreTrimestre, dos, objectOut);

				if (this.diaLaboral == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeChar(this.diaLaboral);
				}

				writeInteger(this.anio, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fechaKey=" + String.valueOf(fechaKey));
			sb.append(",fullDate=" + String.valueOf(fullDate));
			sb.append(",nombreDia=" + nombreDia);
			sb.append(",diaDeSemana=" + String.valueOf(diaDeSemana));
			sb.append(",numDiaEnMes=" + String.valueOf(numDiaEnMes));
			sb.append(",mes=" + String.valueOf(mes));
			sb.append(",nombreMes=" + nombreMes);
			sb.append(",numSemanaEnMes=" + String.valueOf(numSemanaEnMes));
			sb.append(",numSemanaEnAnio=" + String.valueOf(numSemanaEnAnio));
			sb.append(",trimestre=" + String.valueOf(trimestre));
			sb.append(",nombreTrimestre=" + nombreTrimestre);
			sb.append(",diaLaboral=" + String.valueOf(diaLaboral));
			sb.append(",anio=" + String.valueOf(anio));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.fullDate, other.fullDate);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_3)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3)
				// outputs:()
				// linked node: tMap_1 - inputs:(row1,row2,row3) outputs:(factvuelos)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Parcial3/Access/dimFecha.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Parcial3/Access/dimFecha.csv", "US-ASCII", ";", "\n", false, 1, 0,
								limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row3 = null;

						row3 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.fechaKey = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"fechaKey", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.fechaKey = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.fullDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"fullDate", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.fullDate = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row3.nombreDia = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.diaDeSemana = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"diaDeSemana", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.diaDeSemana = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 4;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.numDiaEnMes = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"numDiaEnMes", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.numDiaEnMes = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 5;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.mes = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"mes", "row3", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}

							} else {

								row3.mes = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row3.nombreMes = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.numSemanaEnMes = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"numSemanaEnMes", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.numSemanaEnMes = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 8;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.numSemanaEnAnio = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"numSemanaEnAnio", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.numSemanaEnAnio = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 9;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.trimestre = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"trimestre", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.trimestre = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 10;

							row3.nombreTrimestre = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 11;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.diaLaboral = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"diaLaboral", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.diaLaboral = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 12;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.anio = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"anio", "row3", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}

							} else {

								row3.anio = null;

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tAdvancedHash_row3 main ] start
							 */

							currentComponent = "tAdvancedHash_row3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							row3Struct row3_HashRow = new row3Struct();

							row3_HashRow.fechaKey = row3.fechaKey;

							row3_HashRow.fullDate = row3.fullDate;

							row3_HashRow.nombreDia = row3.nombreDia;

							row3_HashRow.diaDeSemana = row3.diaDeSemana;

							row3_HashRow.numDiaEnMes = row3.numDiaEnMes;

							row3_HashRow.mes = row3.mes;

							row3_HashRow.nombreMes = row3.nombreMes;

							row3_HashRow.numSemanaEnMes = row3.numSemanaEnMes;

							row3_HashRow.numSemanaEnAnio = row3.numSemanaEnAnio;

							row3_HashRow.trimestre = row3.trimestre;

							row3_HashRow.nombreTrimestre = row3.nombreTrimestre;

							row3_HashRow.diaLaboral = row3.diaLaboral;

							row3_HashRow.anio = row3.anio;

							tHash_Lookup_row3.put(row3_HashRow);

							tos_count_tAdvancedHash_row3++;

							/**
							 * [tAdvancedHash_row3 main ] stop
							 */

							/**
							 * [tAdvancedHash_row3 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row3";

							/**
							 * [tAdvancedHash_row3 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row3 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row3";

							/**
							 * [tAdvancedHash_row3 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Parcial3/Access/dimFecha.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final factVuelo_up factVuelo_upClass = new factVuelo_up();

		int exitCode = factVuelo_upClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = factVuelo_up.class.getClassLoader()
					.getResourceAsStream("parcial3_ge11002/factvuelo_up_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = factVuelo_up.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_3) {
			globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : factVuelo_up");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 228450 characters generated by Talend Open Studio for Data Integration on the
 * October 29, 2023, 11:24:30 PM CST
 ************************************************************************************************/